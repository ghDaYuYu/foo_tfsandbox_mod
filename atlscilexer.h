#ifndef __ATLSCILEXER_H__
#define __ATLSCILEXER_H__

#pragma once

#ifndef __cplusplus
	#error ATL requires C++ compilation (use a .cpp suffix)
#endif

#ifndef __ATLAPP_H__
	#error atlscilexer.h requires atlapp.h to be included first
#endif

#ifndef __ATLWIN_H__
	#error atlscilexer.h requires atlwin.h to be included first
#endif

#ifndef SCINTILLA_H
#include <scintilla.h>
#endif

namespace WTL
{

template<class TBase>
class CSciLexerCtrlT : public TBase
{
public:
	SciFnDirect m_DirectFunction;
	LRESULT m_DirectPointer;

// Constructors
	CSciLexerCtrlT(HWND hWnd = NULL) : TBase(hWnd)
	{
		m_DirectFunction = 0;
		m_DirectPointer = 0;
	}

	CSciLexerCtrlT< TBase >& operator =(HWND hWnd)
	{
		m_hWnd = hWnd;
		m_DirectFunction = 0;
		m_DirectPointer = 0;
		return *this;
	}

	HWND Create(HWND hWndParent, ATL::_U_RECT rect = NULL, LPCTSTR szWindowName = NULL,
			DWORD dwStyle = 0, DWORD dwExStyle = 0,
			ATL::_U_MENUorID MenuOrID = 0U, LPVOID lpCreateParam = NULL)
	{
		return TBase::Create(GetWndClassName(), hWndParent, rect.m_lpRect, szWindowName, dwStyle, dwExStyle, MenuOrID.m_hMenu, lpCreateParam);
	}

	void EnableDirectFunction(bool enable)
	{
		ATLASSERT(::IsWindow(m_hWnd));;
		if (enable)
		{
			m_DirectFunction = (SciFnDirect)::SendMessage(m_hWnd, SCI_GETDIRECTFUNCTION, 0, 0);
			m_DirectPointer = ::SendMessage(m_hWnd, SCI_GETDIRECTPOINTER, 0, 0);
		}
		else
		{
			m_DirectFunction = 0;
			m_DirectPointer = 0;
		}
	}

	LRESULT Call(UINT Msg, WPARAM wParam = 0, LPARAM lParam = 0) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));;
		if (m_DirectFunction)
			return m_DirectFunction(m_DirectPointer, Msg, wParam, lParam);
		else
			return ::SendMessage(m_hWnd, Msg, wParam, lParam);
	}

// Attributes
	static LPCTSTR GetWndClassName()
	{
		return _T("Scintilla");
	}

	int GetText(CSimpleStringA& strText) const
	{
		int nLength;
		LPSTR pszText;

		nLength = GetTextLength();
		pszText = strText.GetBuffer(nLength+1);
		nLength = GetText(nLength+1, pszText);
		strText.ReleaseBuffer(nLength);

		return nLength;
	}

//++Autogenerated -- start of section automatically generated from Scintilla.iface
	void AddText(int length, const char* text) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_ADDTEXT, (WPARAM) length, (LPARAM) text);
	}

	void AddStyledText(int length, char* c) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_ADDSTYLEDTEXT, (WPARAM) length, (LPARAM) c);
	}

	void InsertText(long pos, const char* text) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_INSERTTEXT, (WPARAM) pos, (LPARAM) text);
	}

	void ClearAll() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CLEARALL, 0, 0);
	}

	void ClearDocumentStyle() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CLEARDOCUMENTSTYLE, 0, 0);
	}

	int GetLength() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETLENGTH, 0, 0);
	}

	int GetCharAt(long pos) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCHARAT, (WPARAM) pos, 0);
	}

	long GetCurrentPos() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCURRENTPOS, 0, 0);
	}

	long GetAnchor() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETANCHOR, 0, 0);
	}

	int GetStyleAt(long pos) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSTYLEAT, (WPARAM) pos, 0);
	}

	void Redo() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_REDO, 0, 0);
	}

	void SetUndoCollection(bool collectUndo) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETUNDOCOLLECTION, (WPARAM) collectUndo, 0);
	}

	void SelectAll() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SELECTALL, 0, 0);
	}

	void SetSavePoint() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSAVEPOINT, 0, 0);
	}

	int GetStyledText(TextRange* tr) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSTYLEDTEXT, 0, (LPARAM) tr);
	}

	bool CanRedo() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_CANREDO, 0, 0);
	}

	int MarkerLineFromHandle(int handle) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_MARKERLINEFROMHANDLE, (WPARAM) handle, 0);
	}

	void MarkerDeleteHandle(int handle) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_MARKERDELETEHANDLE, (WPARAM) handle, 0);
	}

	bool GetUndoCollection() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETUNDOCOLLECTION, 0, 0);
	}

	int GetViewWS() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETVIEWWS, 0, 0);
	}

	void SetViewWS(int viewWS) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETVIEWWS, (WPARAM) viewWS, 0);
	}

	long PositionFromPoint(int x, int y) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_POSITIONFROMPOINT, (WPARAM) x, (LPARAM) y);
	}

	long PositionFromPointClose(int x, int y) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_POSITIONFROMPOINTCLOSE, (WPARAM) x, (LPARAM) y);
	}

	void GotoLine(int line) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_GOTOLINE, (WPARAM) line, 0);
	}

	void GotoPos(long pos) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_GOTOPOS, (WPARAM) pos, 0);
	}

	void SetAnchor(long posAnchor) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETANCHOR, (WPARAM) posAnchor, 0);
	}

	int GetCurLine(int length, char* text) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCURLINE, (WPARAM) length, (LPARAM) text);
	}

	long GetEndStyled() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETENDSTYLED, 0, 0);
	}

	void ConvertEOLs(int eolMode) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CONVERTEOLS, (WPARAM) eolMode, 0);
	}

	int GetEOLMode() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETEOLMODE, 0, 0);
	}

	void SetEOLMode(int eolMode) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETEOLMODE, (WPARAM) eolMode, 0);
	}

	void StartStyling(long pos, int mask) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STARTSTYLING, (WPARAM) pos, (LPARAM) mask);
	}

	void SetStyling(int length, int style) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSTYLING, (WPARAM) length, (LPARAM) style);
	}

	bool GetBufferedDraw() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETBUFFEREDDRAW, 0, 0);
	}

	void SetBufferedDraw(bool buffered) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETBUFFEREDDRAW, (WPARAM) buffered, 0);
	}

	void SetTabWidth(int tabWidth) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETTABWIDTH, (WPARAM) tabWidth, 0);
	}

	int GetTabWidth() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETTABWIDTH, 0, 0);
	}

	void SetCodePage(int codePage) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETCODEPAGE, (WPARAM) codePage, 0);
	}

	void SetUsePalette(bool usePalette) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETUSEPALETTE, (WPARAM) usePalette, 0);
	}

	void MarkerDefine(int markerNumber, int markerSymbol) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_MARKERDEFINE, (WPARAM) markerNumber, (LPARAM) markerSymbol);
	}

	void MarkerSetFore(int markerNumber, COLORREF fore) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_MARKERSETFORE, (WPARAM) markerNumber, (LPARAM) fore);
	}

	void MarkerSetBack(int markerNumber, COLORREF back) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_MARKERSETBACK, (WPARAM) markerNumber, (LPARAM) back);
	}

	int MarkerAdd(int line, int markerNumber) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_MARKERADD, (WPARAM) line, (LPARAM) markerNumber);
	}

	void MarkerDelete(int line, int markerNumber) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_MARKERDELETE, (WPARAM) line, (LPARAM) markerNumber);
	}

	void MarkerDeleteAll(int markerNumber) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_MARKERDELETEALL, (WPARAM) markerNumber, 0);
	}

	int MarkerGet(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_MARKERGET, (WPARAM) line, 0);
	}

	int MarkerNext(int lineStart, int markerMask) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_MARKERNEXT, (WPARAM) lineStart, (LPARAM) markerMask);
	}

	int MarkerPrevious(int lineStart, int markerMask) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_MARKERPREVIOUS, (WPARAM) lineStart, (LPARAM) markerMask);
	}

	void MarkerDefinePixmap(int markerNumber, const char* pixmap) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_MARKERDEFINEPIXMAP, (WPARAM) markerNumber, (LPARAM) pixmap);
	}

	void MarkerAddSet(int line, int set) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_MARKERADDSET, (WPARAM) line, (LPARAM) set);
	}

	void MarkerSetAlpha(int markerNumber, int alpha) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_MARKERSETALPHA, (WPARAM) markerNumber, (LPARAM) alpha);
	}

	void SetMarginTypeN(int margin, int marginType) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETMARGINTYPEN, (WPARAM) margin, (LPARAM) marginType);
	}

	int GetMarginTypeN(int margin) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETMARGINTYPEN, (WPARAM) margin, 0);
	}

	void SetMarginWidthN(int margin, int pixelWidth) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETMARGINWIDTHN, (WPARAM) margin, (LPARAM) pixelWidth);
	}

	int GetMarginWidthN(int margin) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETMARGINWIDTHN, (WPARAM) margin, 0);
	}

	void SetMarginMaskN(int margin, int mask) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETMARGINMASKN, (WPARAM) margin, (LPARAM) mask);
	}

	int GetMarginMaskN(int margin) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETMARGINMASKN, (WPARAM) margin, 0);
	}

	void SetMarginSensitiveN(int margin, bool sensitive) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETMARGINSENSITIVEN, (WPARAM) margin, (LPARAM) sensitive);
	}

	bool GetMarginSensitiveN(int margin) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETMARGINSENSITIVEN, (WPARAM) margin, 0);
	}

	void StyleClearAll() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLECLEARALL, 0, 0);
	}

	void StyleSetFore(int style, COLORREF fore) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLESETFORE, (WPARAM) style, (LPARAM) fore);
	}

	void StyleSetBack(int style, COLORREF back) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLESETBACK, (WPARAM) style, (LPARAM) back);
	}

	void StyleSetBold(int style, bool bold) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLESETBOLD, (WPARAM) style, (LPARAM) bold);
	}

	void StyleSetItalic(int style, bool italic) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLESETITALIC, (WPARAM) style, (LPARAM) italic);
	}

	void StyleSetSize(int style, int sizePoints) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLESETSIZE, (WPARAM) style, (LPARAM) sizePoints);
	}

	void StyleSetFont(int style, const char* fontName) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLESETFONT, (WPARAM) style, (LPARAM) fontName);
	}

	void StyleSetEOLFilled(int style, bool filled) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLESETEOLFILLED, (WPARAM) style, (LPARAM) filled);
	}

	void StyleResetDefault() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLERESETDEFAULT, 0, 0);
	}

	void StyleSetUnderline(int style, bool underline) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLESETUNDERLINE, (WPARAM) style, (LPARAM) underline);
	}

	COLORREF StyleGetFore(int style) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_STYLEGETFORE, (WPARAM) style, 0);
	}

	COLORREF StyleGetBack(int style) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_STYLEGETBACK, (WPARAM) style, 0);
	}

	bool StyleGetBold(int style) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_STYLEGETBOLD, (WPARAM) style, 0);
	}

	bool StyleGetItalic(int style) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_STYLEGETITALIC, (WPARAM) style, 0);
	}

	int StyleGetSize(int style) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_STYLEGETSIZE, (WPARAM) style, 0);
	}

	int StyleGetFont(int style, char* fontName) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_STYLEGETFONT, (WPARAM) style, (LPARAM) fontName);
	}

	bool StyleGetEOLFilled(int style) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_STYLEGETEOLFILLED, (WPARAM) style, 0);
	}

	bool StyleGetUnderline(int style) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_STYLEGETUNDERLINE, (WPARAM) style, 0);
	}

	int StyleGetCase(int style) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_STYLEGETCASE, (WPARAM) style, 0);
	}

	int StyleGetCharacterSet(int style) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_STYLEGETCHARACTERSET, (WPARAM) style, 0);
	}

	bool StyleGetVisible(int style) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_STYLEGETVISIBLE, (WPARAM) style, 0);
	}

	bool StyleGetChangeable(int style) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_STYLEGETCHANGEABLE, (WPARAM) style, 0);
	}

	bool StyleGetHotSpot(int style) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_STYLEGETHOTSPOT, (WPARAM) style, 0);
	}

	void StyleSetCase(int style, int caseForce) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLESETCASE, (WPARAM) style, (LPARAM) caseForce);
	}

	void StyleSetCharacterSet(int style, int characterSet) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLESETCHARACTERSET, (WPARAM) style, (LPARAM) characterSet);
	}

	void StyleSetHotSpot(int style, bool hotspot) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLESETHOTSPOT, (WPARAM) style, (LPARAM) hotspot);
	}

	void SetSelFore(bool useSetting, COLORREF fore) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSELFORE, (WPARAM) useSetting, (LPARAM) fore);
	}

	void SetSelBack(bool useSetting, COLORREF back) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSELBACK, (WPARAM) useSetting, (LPARAM) back);
	}

	int GetSelAlpha() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSELALPHA, 0, 0);
	}

	void SetSelAlpha(int alpha) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSELALPHA, (WPARAM) alpha, 0);
	}

	bool GetSelEOLFilled() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSELEOLFILLED, 0, 0);
	}

	void SetSelEOLFilled(bool filled) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSELEOLFILLED, (WPARAM) filled, 0);
	}

	void SetCaretFore(COLORREF fore) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETCARETFORE, (WPARAM) fore, 0);
	}

	void AssignCmdKey(DWORD km, int msg) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_ASSIGNCMDKEY, (WPARAM) km, (LPARAM) msg);
	}

	void ClearCmdKey(DWORD km) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CLEARCMDKEY, (WPARAM) km, 0);
	}

	void ClearAllCmdKeys() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CLEARALLCMDKEYS, 0, 0);
	}

	void SetStylingEx(int length, const char* styles) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSTYLINGEX, (WPARAM) length, (LPARAM) styles);
	}

	void StyleSetVisible(int style, bool visible) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLESETVISIBLE, (WPARAM) style, (LPARAM) visible);
	}

	int GetCaretPeriod() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCARETPERIOD, 0, 0);
	}

	void SetCaretPeriod(int periodMilliseconds) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETCARETPERIOD, (WPARAM) periodMilliseconds, 0);
	}

	void SetWordChars(const char* characters) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETWORDCHARS, 0, (LPARAM) characters);
	}

	void BeginUndoAction() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_BEGINUNDOACTION, 0, 0);
	}

	void EndUndoAction() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_ENDUNDOACTION, 0, 0);
	}

	void IndicSetStyle(int indic, int style) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_INDICSETSTYLE, (WPARAM) indic, (LPARAM) style);
	}

	int IndicGetStyle(int indic) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_INDICGETSTYLE, (WPARAM) indic, 0);
	}

	void IndicSetFore(int indic, COLORREF fore) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_INDICSETFORE, (WPARAM) indic, (LPARAM) fore);
	}

	COLORREF IndicGetFore(int indic) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_INDICGETFORE, (WPARAM) indic, 0);
	}

	void IndicSetUnder(int indic, bool under) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_INDICSETUNDER, (WPARAM) indic, (LPARAM) under);
	}

	bool IndicGetUnder(int indic) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_INDICGETUNDER, (WPARAM) indic, 0);
	}

	void SetWhitespaceFore(bool useSetting, COLORREF fore) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETWHITESPACEFORE, (WPARAM) useSetting, (LPARAM) fore);
	}

	void SetWhitespaceBack(bool useSetting, COLORREF back) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETWHITESPACEBACK, (WPARAM) useSetting, (LPARAM) back);
	}

	void SetStyleBits(int bits) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSTYLEBITS, (WPARAM) bits, 0);
	}

	int GetStyleBits() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSTYLEBITS, 0, 0);
	}

	void SetLineState(int line, int state) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETLINESTATE, (WPARAM) line, (LPARAM) state);
	}

	int GetLineState(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETLINESTATE, (WPARAM) line, 0);
	}

	int GetMaxLineState() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETMAXLINESTATE, 0, 0);
	}

	bool GetCaretLineVisible() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCARETLINEVISIBLE, 0, 0);
	}

	void SetCaretLineVisible(bool show) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETCARETLINEVISIBLE, (WPARAM) show, 0);
	}

	COLORREF GetCaretLineBack() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCARETLINEBACK, 0, 0);
	}

	void SetCaretLineBack(COLORREF back) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETCARETLINEBACK, (WPARAM) back, 0);
	}

	void StyleSetChangeable(int style, bool changeable) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STYLESETCHANGEABLE, (WPARAM) style, (LPARAM) changeable);
	}

	void AutoCShow(int lenEntered, const char* itemList) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCSHOW, (WPARAM) lenEntered, (LPARAM) itemList);
	}

	void AutoCCancel() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCCANCEL, 0, 0);
	}

	bool AutoCActive() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_AUTOCACTIVE, 0, 0);
	}

	long AutoCPosStart() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_AUTOCPOSSTART, 0, 0);
	}

	void AutoCComplete() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCCOMPLETE, 0, 0);
	}

	void AutoCStops(const char* characterSet) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCSTOPS, 0, (LPARAM) characterSet);
	}

	void AutoCSetSeparator(int separatorCharacter) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCSETSEPARATOR, (WPARAM) separatorCharacter, 0);
	}

	int AutoCGetSeparator() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_AUTOCGETSEPARATOR, 0, 0);
	}

	void AutoCSelect(const char* text) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCSELECT, 0, (LPARAM) text);
	}

	void AutoCSetCancelAtStart(bool cancel) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCSETCANCELATSTART, (WPARAM) cancel, 0);
	}

	bool AutoCGetCancelAtStart() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_AUTOCGETCANCELATSTART, 0, 0);
	}

	void AutoCSetFillUps(const char* characterSet) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCSETFILLUPS, 0, (LPARAM) characterSet);
	}

	void AutoCSetChooseSingle(bool chooseSingle) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCSETCHOOSESINGLE, (WPARAM) chooseSingle, 0);
	}

	bool AutoCGetChooseSingle() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_AUTOCGETCHOOSESINGLE, 0, 0);
	}

	void AutoCSetIgnoreCase(bool ignoreCase) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCSETIGNORECASE, (WPARAM) ignoreCase, 0);
	}

	bool AutoCGetIgnoreCase() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_AUTOCGETIGNORECASE, 0, 0);
	}

	void UserListShow(int listType, const char* itemList) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_USERLISTSHOW, (WPARAM) listType, (LPARAM) itemList);
	}

	void AutoCSetAutoHide(bool autoHide) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCSETAUTOHIDE, (WPARAM) autoHide, 0);
	}

	bool AutoCGetAutoHide() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_AUTOCGETAUTOHIDE, 0, 0);
	}

	void AutoCSetDropRestOfWord(bool dropRestOfWord) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCSETDROPRESTOFWORD, (WPARAM) dropRestOfWord, 0);
	}

	bool AutoCGetDropRestOfWord() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_AUTOCGETDROPRESTOFWORD, 0, 0);
	}

	void RegisterImage(int type, const char* xpmData) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_REGISTERIMAGE, (WPARAM) type, (LPARAM) xpmData);
	}

	void ClearRegisteredImages() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CLEARREGISTEREDIMAGES, 0, 0);
	}

	int AutoCGetTypeSeparator() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_AUTOCGETTYPESEPARATOR, 0, 0);
	}

	void AutoCSetTypeSeparator(int separatorCharacter) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCSETTYPESEPARATOR, (WPARAM) separatorCharacter, 0);
	}

	void AutoCSetMaxWidth(int characterCount) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCSETMAXWIDTH, (WPARAM) characterCount, 0);
	}

	int AutoCGetMaxWidth() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_AUTOCGETMAXWIDTH, 0, 0);
	}

	void AutoCSetMaxHeight(int rowCount) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_AUTOCSETMAXHEIGHT, (WPARAM) rowCount, 0);
	}

	int AutoCGetMaxHeight() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_AUTOCGETMAXHEIGHT, 0, 0);
	}

	void SetIndent(int indentSize) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETINDENT, (WPARAM) indentSize, 0);
	}

	int GetIndent() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETINDENT, 0, 0);
	}

	void SetUseTabs(bool useTabs) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETUSETABS, (WPARAM) useTabs, 0);
	}

	bool GetUseTabs() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETUSETABS, 0, 0);
	}

	void SetLineIndentation(int line, int indentSize) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETLINEINDENTATION, (WPARAM) line, (LPARAM) indentSize);
	}

	int GetLineIndentation(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETLINEINDENTATION, (WPARAM) line, 0);
	}

	long GetLineIndentPosition(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETLINEINDENTPOSITION, (WPARAM) line, 0);
	}

	int GetColumn(long pos) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCOLUMN, (WPARAM) pos, 0);
	}

	void SetHScrollBar(bool show) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETHSCROLLBAR, (WPARAM) show, 0);
	}

	bool GetHScrollBar() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETHSCROLLBAR, 0, 0);
	}

	void SetIndentationGuides(int indentView) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETINDENTATIONGUIDES, (WPARAM) indentView, 0);
	}

	int GetIndentationGuides() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETINDENTATIONGUIDES, 0, 0);
	}

	void SetHighlightGuide(int column) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETHIGHLIGHTGUIDE, (WPARAM) column, 0);
	}

	int GetHighlightGuide() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETHIGHLIGHTGUIDE, 0, 0);
	}

	int GetLineEndPosition(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETLINEENDPOSITION, (WPARAM) line, 0);
	}

	int GetCodePage() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCODEPAGE, 0, 0);
	}

	COLORREF GetCaretFore() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCARETFORE, 0, 0);
	}

	bool GetUsePalette() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETUSEPALETTE, 0, 0);
	}

	bool GetReadOnly() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETREADONLY, 0, 0);
	}

	void SetCurrentPos(long pos) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETCURRENTPOS, (WPARAM) pos, 0);
	}

	void SetSelectionStart(long pos) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSELECTIONSTART, (WPARAM) pos, 0);
	}

	long GetSelectionStart() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSELECTIONSTART, 0, 0);
	}

	void SetSelectionEnd(long pos) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSELECTIONEND, (WPARAM) pos, 0);
	}

	long GetSelectionEnd() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSELECTIONEND, 0, 0);
	}

	void SetPrintMagnification(int magnification) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETPRINTMAGNIFICATION, (WPARAM) magnification, 0);
	}

	int GetPrintMagnification() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETPRINTMAGNIFICATION, 0, 0);
	}

	void SetPrintColourMode(int mode) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETPRINTCOLOURMODE, (WPARAM) mode, 0);
	}

	int GetPrintColourMode() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETPRINTCOLOURMODE, 0, 0);
	}

	long FindText(int flags, TextToFind* ft) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_FINDTEXT, (WPARAM) flags, (LPARAM) ft);
	}

	int GetFirstVisibleLine() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETFIRSTVISIBLELINE, 0, 0);
	}

	int GetLine(int line, char* text) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETLINE, (WPARAM) line, (LPARAM) text);
	}

	int GetLineCount() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETLINECOUNT, 0, 0);
	}

	void SetMarginLeft(int pixelWidth) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETMARGINLEFT, 0, (LPARAM) pixelWidth);
	}

	int GetMarginLeft() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETMARGINLEFT, 0, 0);
	}

	void SetMarginRight(int pixelWidth) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETMARGINRIGHT, 0, (LPARAM) pixelWidth);
	}

	int GetMarginRight() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETMARGINRIGHT, 0, 0);
	}

	bool GetModify() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETMODIFY, 0, 0);
	}

	void SetSel(long start, long end) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSEL, (WPARAM) start, (LPARAM) end);
	}

	int GetSelText(char* text) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSELTEXT, 0, (LPARAM) text);
	}

	int GetTextRange(TextRange* tr) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETTEXTRANGE, 0, (LPARAM) tr);
	}

	void HideSelection(bool normal) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_HIDESELECTION, (WPARAM) normal, 0);
	}

	int PointXFromPosition(long pos) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_POINTXFROMPOSITION, 0, (LPARAM) pos);
	}

	int PointYFromPosition(long pos) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_POINTYFROMPOSITION, 0, (LPARAM) pos);
	}

	int LineFromPosition(long pos) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_LINEFROMPOSITION, (WPARAM) pos, 0);
	}

	long PositionFromLine(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_POSITIONFROMLINE, (WPARAM) line, 0);
	}

	void LineScroll(int columns, int lines) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINESCROLL, (WPARAM) columns, (LPARAM) lines);
	}

	void ScrollCaret() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SCROLLCARET, 0, 0);
	}

	void ReplaceSel(const char* text) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_REPLACESEL, 0, (LPARAM) text);
	}

	void SetReadOnly(bool readOnly) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETREADONLY, (WPARAM) readOnly, 0);
	}

	void Null() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_NULL, 0, 0);
	}

	bool CanPaste() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_CANPASTE, 0, 0);
	}

	bool CanUndo() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_CANUNDO, 0, 0);
	}

	void EmptyUndoBuffer() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_EMPTYUNDOBUFFER, 0, 0);
	}

	void Undo() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_UNDO, 0, 0);
	}

	void Cut() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CUT, 0, 0);
	}

	void Copy() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_COPY, 0, 0);
	}

	void Paste() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_PASTE, 0, 0);
	}

	void Clear() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CLEAR, 0, 0);
	}

	void SetText(const char* text) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETTEXT, 0, (LPARAM) text);
	}

	int GetText(int length, char* text) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETTEXT, (WPARAM) length, (LPARAM) text);
	}

	int GetTextLength() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETTEXTLENGTH, 0, 0);
	}

	void SetOvertype(bool overtype) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETOVERTYPE, (WPARAM) overtype, 0);
	}

	bool GetOvertype() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETOVERTYPE, 0, 0);
	}

	void SetCaretWidth(int pixelWidth) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETCARETWIDTH, (WPARAM) pixelWidth, 0);
	}

	int GetCaretWidth() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCARETWIDTH, 0, 0);
	}

	void SetTargetStart(long pos) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETTARGETSTART, (WPARAM) pos, 0);
	}

	long GetTargetStart() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETTARGETSTART, 0, 0);
	}

	void SetTargetEnd(long pos) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETTARGETEND, (WPARAM) pos, 0);
	}

	long GetTargetEnd() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETTARGETEND, 0, 0);
	}

	int ReplaceTarget(int length, const char* text) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_REPLACETARGET, (WPARAM) length, (LPARAM) text);
	}

	int ReplaceTargetRE(int length, const char* text) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_REPLACETARGETRE, (WPARAM) length, (LPARAM) text);
	}

	int SearchInTarget(int length, const char* text) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_SEARCHINTARGET, (WPARAM) length, (LPARAM) text);
	}

	void SetSearchFlags(int flags) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSEARCHFLAGS, (WPARAM) flags, 0);
	}

	int GetSearchFlags() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSEARCHFLAGS, 0, 0);
	}

	void CallTipShow(long pos, const char* definition) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CALLTIPSHOW, (WPARAM) pos, (LPARAM) definition);
	}

	void CallTipCancel() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CALLTIPCANCEL, 0, 0);
	}

	bool CallTipActive() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_CALLTIPACTIVE, 0, 0);
	}

	long CallTipPosStart() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_CALLTIPPOSSTART, 0, 0);
	}

	void CallTipSetHlt(int start, int end) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CALLTIPSETHLT, (WPARAM) start, (LPARAM) end);
	}

	void CallTipSetBack(COLORREF back) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CALLTIPSETBACK, (WPARAM) back, 0);
	}

	void CallTipSetFore(COLORREF fore) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CALLTIPSETFORE, (WPARAM) fore, 0);
	}

	void CallTipSetForeHlt(COLORREF fore) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CALLTIPSETFOREHLT, (WPARAM) fore, 0);
	}

	void CallTipUseStyle(int tabSize) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CALLTIPUSESTYLE, (WPARAM) tabSize, 0);
	}

	int VisibleFromDocLine(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_VISIBLEFROMDOCLINE, (WPARAM) line, 0);
	}

	int DocLineFromVisible(int lineDisplay) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_DOCLINEFROMVISIBLE, (WPARAM) lineDisplay, 0);
	}

	int WrapCount(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_WRAPCOUNT, (WPARAM) line, 0);
	}

	void SetFoldLevel(int line, int level) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETFOLDLEVEL, (WPARAM) line, (LPARAM) level);
	}

	int GetFoldLevel(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETFOLDLEVEL, (WPARAM) line, 0);
	}

	int GetLastChild(int line, int level) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETLASTCHILD, (WPARAM) line, (LPARAM) level);
	}

	int GetFoldParent(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETFOLDPARENT, (WPARAM) line, 0);
	}

	void ShowLines(int lineStart, int lineEnd) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SHOWLINES, (WPARAM) lineStart, (LPARAM) lineEnd);
	}

	void HideLines(int lineStart, int lineEnd) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_HIDELINES, (WPARAM) lineStart, (LPARAM) lineEnd);
	}

	bool GetLineVisible(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETLINEVISIBLE, (WPARAM) line, 0);
	}

	void SetFoldExpanded(int line, bool expanded) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETFOLDEXPANDED, (WPARAM) line, (LPARAM) expanded);
	}

	bool GetFoldExpanded(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETFOLDEXPANDED, (WPARAM) line, 0);
	}

	void ToggleFold(int line) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_TOGGLEFOLD, (WPARAM) line, 0);
	}

	void EnsureVisible(int line) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_ENSUREVISIBLE, (WPARAM) line, 0);
	}

	void SetFoldFlags(int flags) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETFOLDFLAGS, (WPARAM) flags, 0);
	}

	void EnsureVisibleEnforcePolicy(int line) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_ENSUREVISIBLEENFORCEPOLICY, (WPARAM) line, 0);
	}

	void SetTabIndents(bool tabIndents) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETTABINDENTS, (WPARAM) tabIndents, 0);
	}

	bool GetTabIndents() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETTABINDENTS, 0, 0);
	}

	void SetBackSpaceUnIndents(bool bsUnIndents) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETBACKSPACEUNINDENTS, (WPARAM) bsUnIndents, 0);
	}

	bool GetBackSpaceUnIndents() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETBACKSPACEUNINDENTS, 0, 0);
	}

	void SetMouseDwellTime(int periodMilliseconds) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETMOUSEDWELLTIME, (WPARAM) periodMilliseconds, 0);
	}

	int GetMouseDwellTime() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETMOUSEDWELLTIME, 0, 0);
	}

	int WordStartPosition(long pos, bool onlyWordCharacters) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_WORDSTARTPOSITION, (WPARAM) pos, (LPARAM) onlyWordCharacters);
	}

	int WordEndPosition(long pos, bool onlyWordCharacters) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_WORDENDPOSITION, (WPARAM) pos, (LPARAM) onlyWordCharacters);
	}

	void SetWrapMode(int mode) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETWRAPMODE, (WPARAM) mode, 0);
	}

	int GetWrapMode() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETWRAPMODE, 0, 0);
	}

	void SetWrapVisualFlags(int wrapVisualFlags) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETWRAPVISUALFLAGS, (WPARAM) wrapVisualFlags, 0);
	}

	int GetWrapVisualFlags() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETWRAPVISUALFLAGS, 0, 0);
	}

	void SetWrapVisualFlagsLocation(int wrapVisualFlagsLocation) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETWRAPVISUALFLAGSLOCATION, (WPARAM) wrapVisualFlagsLocation, 0);
	}

	int GetWrapVisualFlagsLocation() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETWRAPVISUALFLAGSLOCATION, 0, 0);
	}

	void SetWrapStartIndent(int indent) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETWRAPSTARTINDENT, (WPARAM) indent, 0);
	}

	int GetWrapStartIndent() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETWRAPSTARTINDENT, 0, 0);
	}

	void SetLayoutCache(int mode) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETLAYOUTCACHE, (WPARAM) mode, 0);
	}

	int GetLayoutCache() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETLAYOUTCACHE, 0, 0);
	}

	void SetScrollWidth(int pixelWidth) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSCROLLWIDTH, (WPARAM) pixelWidth, 0);
	}

	int GetScrollWidth() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSCROLLWIDTH, 0, 0);
	}

	void SetScrollWidthTracking(bool tracking) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSCROLLWIDTHTRACKING, (WPARAM) tracking, 0);
	}

	bool GetScrollWidthTracking() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSCROLLWIDTHTRACKING, 0, 0);
	}

	int TextWidth(int style, const char* text) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_TEXTWIDTH, (WPARAM) style, (LPARAM) text);
	}

	void SetEndAtLastLine(bool endAtLastLine) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETENDATLASTLINE, (WPARAM) endAtLastLine, 0);
	}

	bool GetEndAtLastLine() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETENDATLASTLINE, 0, 0);
	}

	int TextHeight(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_TEXTHEIGHT, (WPARAM) line, 0);
	}

	void SetVScrollBar(bool show) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETVSCROLLBAR, (WPARAM) show, 0);
	}

	bool GetVScrollBar() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETVSCROLLBAR, 0, 0);
	}

	void AppendText(int length, const char* text) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_APPENDTEXT, (WPARAM) length, (LPARAM) text);
	}

	bool GetTwoPhaseDraw() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETTWOPHASEDRAW, 0, 0);
	}

	void SetTwoPhaseDraw(bool twoPhase) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETTWOPHASEDRAW, (WPARAM) twoPhase, 0);
	}

	void TargetFromSelection() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_TARGETFROMSELECTION, 0, 0);
	}

	void LinesJoin() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINESJOIN, 0, 0);
	}

	void LinesSplit(int pixelWidth) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINESSPLIT, (WPARAM) pixelWidth, 0);
	}

	void SetFoldMarginColour(bool useSetting, COLORREF back) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETFOLDMARGINCOLOUR, (WPARAM) useSetting, (LPARAM) back);
	}

	void SetFoldMarginHiColour(bool useSetting, COLORREF fore) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETFOLDMARGINHICOLOUR, (WPARAM) useSetting, (LPARAM) fore);
	}

	void LineDown() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEDOWN, 0, 0);
	}

	void LineDownExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEDOWNEXTEND, 0, 0);
	}

	void LineUp() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEUP, 0, 0);
	}

	void LineUpExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEUPEXTEND, 0, 0);
	}

	void CharLeft() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CHARLEFT, 0, 0);
	}

	void CharLeftExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CHARLEFTEXTEND, 0, 0);
	}

	void CharRight() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CHARRIGHT, 0, 0);
	}

	void CharRightExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CHARRIGHTEXTEND, 0, 0);
	}

	void WordLeft() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_WORDLEFT, 0, 0);
	}

	void WordLeftExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_WORDLEFTEXTEND, 0, 0);
	}

	void WordRight() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_WORDRIGHT, 0, 0);
	}

	void WordRightExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_WORDRIGHTEXTEND, 0, 0);
	}

	void Home() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_HOME, 0, 0);
	}

	void HomeExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_HOMEEXTEND, 0, 0);
	}

	void LineEnd() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEEND, 0, 0);
	}

	void LineEndExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEENDEXTEND, 0, 0);
	}

	void DocumentStart() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_DOCUMENTSTART, 0, 0);
	}

	void DocumentStartExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_DOCUMENTSTARTEXTEND, 0, 0);
	}

	void DocumentEnd() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_DOCUMENTEND, 0, 0);
	}

	void DocumentEndExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_DOCUMENTENDEXTEND, 0, 0);
	}

	void PageUp() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_PAGEUP, 0, 0);
	}

	void PageUpExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_PAGEUPEXTEND, 0, 0);
	}

	void PageDown() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_PAGEDOWN, 0, 0);
	}

	void PageDownExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_PAGEDOWNEXTEND, 0, 0);
	}

	void EditToggleOvertype() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_EDITTOGGLEOVERTYPE, 0, 0);
	}

	void Cancel() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CANCEL, 0, 0);
	}

	void DeleteBack() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_DELETEBACK, 0, 0);
	}

	void Tab() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_TAB, 0, 0);
	}

	void BackTab() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_BACKTAB, 0, 0);
	}

	void NewLine() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_NEWLINE, 0, 0);
	}

	void FormFeed() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_FORMFEED, 0, 0);
	}

	void VCHome() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_VCHOME, 0, 0);
	}

	void VCHomeExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_VCHOMEEXTEND, 0, 0);
	}

	void ZoomIn() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_ZOOMIN, 0, 0);
	}

	void ZoomOut() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_ZOOMOUT, 0, 0);
	}

	void DelWordLeft() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_DELWORDLEFT, 0, 0);
	}

	void DelWordRight() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_DELWORDRIGHT, 0, 0);
	}

	void DelWordRightEnd() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_DELWORDRIGHTEND, 0, 0);
	}

	void LineCut() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINECUT, 0, 0);
	}

	void LineDelete() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEDELETE, 0, 0);
	}

	void LineTranspose() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINETRANSPOSE, 0, 0);
	}

	void LineDuplicate() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEDUPLICATE, 0, 0);
	}

	void LowerCase() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LOWERCASE, 0, 0);
	}

	void UpperCase() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_UPPERCASE, 0, 0);
	}

	void LineScrollDown() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINESCROLLDOWN, 0, 0);
	}

	void LineScrollUp() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINESCROLLUP, 0, 0);
	}

	void DeleteBackNotLine() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_DELETEBACKNOTLINE, 0, 0);
	}

	void HomeDisplay() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_HOMEDISPLAY, 0, 0);
	}

	void HomeDisplayExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_HOMEDISPLAYEXTEND, 0, 0);
	}

	void LineEndDisplay() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEENDDISPLAY, 0, 0);
	}

	void LineEndDisplayExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEENDDISPLAYEXTEND, 0, 0);
	}

	void HomeWrap() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_HOMEWRAP, 0, 0);
	}

	void HomeWrapExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_HOMEWRAPEXTEND, 0, 0);
	}

	void LineEndWrap() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEENDWRAP, 0, 0);
	}

	void LineEndWrapExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEENDWRAPEXTEND, 0, 0);
	}

	void VCHomeWrap() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_VCHOMEWRAP, 0, 0);
	}

	void VCHomeWrapExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_VCHOMEWRAPEXTEND, 0, 0);
	}

	void LineCopy() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINECOPY, 0, 0);
	}

	void MoveCaretInsideView() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_MOVECARETINSIDEVIEW, 0, 0);
	}

	int LineLength(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_LINELENGTH, (WPARAM) line, 0);
	}

	void BraceHighlight(long pos1, long pos2) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_BRACEHIGHLIGHT, (WPARAM) pos1, (LPARAM) pos2);
	}

	void BraceBadLight(long pos) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_BRACEBADLIGHT, (WPARAM) pos, 0);
	}

	long BraceMatch(long pos) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_BRACEMATCH, (WPARAM) pos, 0);
	}

	bool GetViewEOL() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETVIEWEOL, 0, 0);
	}

	void SetViewEOL(bool visible) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETVIEWEOL, (WPARAM) visible, 0);
	}

	int GetDocPointer() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETDOCPOINTER, 0, 0);
	}

	void SetDocPointer(int pointer) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETDOCPOINTER, 0, (LPARAM) pointer);
	}

	void SetModEventMask(int mask) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETMODEVENTMASK, (WPARAM) mask, 0);
	}

	int GetEdgeColumn() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETEDGECOLUMN, 0, 0);
	}

	void SetEdgeColumn(int column) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETEDGECOLUMN, (WPARAM) column, 0);
	}

	int GetEdgeMode() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETEDGEMODE, 0, 0);
	}

	void SetEdgeMode(int mode) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETEDGEMODE, (WPARAM) mode, 0);
	}

	COLORREF GetEdgeColour() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETEDGECOLOUR, 0, 0);
	}

	void SetEdgeColour(COLORREF edgeColour) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETEDGECOLOUR, (WPARAM) edgeColour, 0);
	}

	void SearchAnchor() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SEARCHANCHOR, 0, 0);
	}

	int SearchNext(int flags, const char* text) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_SEARCHNEXT, (WPARAM) flags, (LPARAM) text);
	}

	int SearchPrev(int flags, const char* text) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_SEARCHPREV, (WPARAM) flags, (LPARAM) text);
	}

	int LinesOnScreen() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_LINESONSCREEN, 0, 0);
	}

	void UsePopUp(bool allowPopUp) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_USEPOPUP, (WPARAM) allowPopUp, 0);
	}

	bool SelectionIsRectangle() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_SELECTIONISRECTANGLE, 0, 0);
	}

	void SetZoom(int zoom) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETZOOM, (WPARAM) zoom, 0);
	}

	int GetZoom() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETZOOM, 0, 0);
	}

	int CreateDocument() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_CREATEDOCUMENT, 0, 0);
	}

	void AddRefDocument(int doc) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_ADDREFDOCUMENT, 0, (LPARAM) doc);
	}

	void ReleaseDocument(int doc) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_RELEASEDOCUMENT, 0, (LPARAM) doc);
	}

	int GetModEventMask() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETMODEVENTMASK, 0, 0);
	}

	void SCISetFocus(bool focus) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETFOCUS, (WPARAM) focus, 0);
	}

	bool GetFocus() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETFOCUS, 0, 0);
	}

	void SetStatus(int statusCode) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSTATUS, (WPARAM) statusCode, 0);
	}

	int GetStatus() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSTATUS, 0, 0);
	}

	void SetMouseDownCaptures(bool captures) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETMOUSEDOWNCAPTURES, (WPARAM) captures, 0);
	}

	bool GetMouseDownCaptures() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETMOUSEDOWNCAPTURES, 0, 0);
	}

	void SetCursor(int cursorType) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETCURSOR, (WPARAM) cursorType, 0);
	}

	int GetCursor() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCURSOR, 0, 0);
	}

	void SetControlCharSymbol(int symbol) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETCONTROLCHARSYMBOL, (WPARAM) symbol, 0);
	}

	int GetControlCharSymbol() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCONTROLCHARSYMBOL, 0, 0);
	}

	void WordPartLeft() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_WORDPARTLEFT, 0, 0);
	}

	void WordPartLeftExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_WORDPARTLEFTEXTEND, 0, 0);
	}

	void WordPartRight() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_WORDPARTRIGHT, 0, 0);
	}

	void WordPartRightExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_WORDPARTRIGHTEXTEND, 0, 0);
	}

	void SetVisiblePolicy(int visiblePolicy, int visibleSlop) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETVISIBLEPOLICY, (WPARAM) visiblePolicy, (LPARAM) visibleSlop);
	}

	void DelLineLeft() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_DELLINELEFT, 0, 0);
	}

	void DelLineRight() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_DELLINERIGHT, 0, 0);
	}

	void SetXOffset(int newOffset) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETXOFFSET, (WPARAM) newOffset, 0);
	}

	int GetXOffset() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETXOFFSET, 0, 0);
	}

	void ChooseCaretX() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CHOOSECARETX, 0, 0);
	}

	void GrabFocus() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_GRABFOCUS, 0, 0);
	}

	void SetXCaretPolicy(int caretPolicy, int caretSlop) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETXCARETPOLICY, (WPARAM) caretPolicy, (LPARAM) caretSlop);
	}

	void SetYCaretPolicy(int caretPolicy, int caretSlop) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETYCARETPOLICY, (WPARAM) caretPolicy, (LPARAM) caretSlop);
	}

	void SetPrintWrapMode(int mode) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETPRINTWRAPMODE, (WPARAM) mode, 0);
	}

	int GetPrintWrapMode() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETPRINTWRAPMODE, 0, 0);
	}

	void SetHotspotActiveFore(bool useSetting, COLORREF fore) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETHOTSPOTACTIVEFORE, (WPARAM) useSetting, (LPARAM) fore);
	}

	COLORREF GetHotspotActiveFore() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETHOTSPOTACTIVEFORE, 0, 0);
	}

	void SetHotspotActiveBack(bool useSetting, COLORREF back) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETHOTSPOTACTIVEBACK, (WPARAM) useSetting, (LPARAM) back);
	}

	COLORREF GetHotspotActiveBack() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETHOTSPOTACTIVEBACK, 0, 0);
	}

	void SetHotspotActiveUnderline(bool underline) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETHOTSPOTACTIVEUNDERLINE, (WPARAM) underline, 0);
	}

	bool GetHotspotActiveUnderline() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETHOTSPOTACTIVEUNDERLINE, 0, 0);
	}

	void SetHotspotSingleLine(bool singleLine) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETHOTSPOTSINGLELINE, (WPARAM) singleLine, 0);
	}

	bool GetHotspotSingleLine() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETHOTSPOTSINGLELINE, 0, 0);
	}

	void ParaDown() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_PARADOWN, 0, 0);
	}

	void ParaDownExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_PARADOWNEXTEND, 0, 0);
	}

	void ParaUp() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_PARAUP, 0, 0);
	}

	void ParaUpExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_PARAUPEXTEND, 0, 0);
	}

	long PositionBefore(long pos) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_POSITIONBEFORE, (WPARAM) pos, 0);
	}

	long PositionAfter(long pos) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_POSITIONAFTER, (WPARAM) pos, 0);
	}

	void CopyRange(long start, long end) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_COPYRANGE, (WPARAM) start, (LPARAM) end);
	}

	void CopyText(int length, const char* text) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_COPYTEXT, (WPARAM) length, (LPARAM) text);
	}

	void SetSelectionMode(int mode) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETSELECTIONMODE, (WPARAM) mode, 0);
	}

	int GetSelectionMode() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSELECTIONMODE, 0, 0);
	}

	long GetLineSelStartPosition(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETLINESELSTARTPOSITION, (WPARAM) line, 0);
	}

	long GetLineSelEndPosition(int line) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETLINESELENDPOSITION, (WPARAM) line, 0);
	}

	void LineDownRectExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEDOWNRECTEXTEND, 0, 0);
	}

	void LineUpRectExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEUPRECTEXTEND, 0, 0);
	}

	void CharLeftRectExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CHARLEFTRECTEXTEND, 0, 0);
	}

	void CharRightRectExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_CHARRIGHTRECTEXTEND, 0, 0);
	}

	void HomeRectExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_HOMERECTEXTEND, 0, 0);
	}

	void VCHomeRectExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_VCHOMERECTEXTEND, 0, 0);
	}

	void LineEndRectExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LINEENDRECTEXTEND, 0, 0);
	}

	void PageUpRectExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_PAGEUPRECTEXTEND, 0, 0);
	}

	void PageDownRectExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_PAGEDOWNRECTEXTEND, 0, 0);
	}

	void StutteredPageUp() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STUTTEREDPAGEUP, 0, 0);
	}

	void StutteredPageUpExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STUTTEREDPAGEUPEXTEND, 0, 0);
	}

	void StutteredPageDown() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STUTTEREDPAGEDOWN, 0, 0);
	}

	void StutteredPageDownExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STUTTEREDPAGEDOWNEXTEND, 0, 0);
	}

	void WordLeftEnd() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_WORDLEFTEND, 0, 0);
	}

	void WordLeftEndExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_WORDLEFTENDEXTEND, 0, 0);
	}

	void WordRightEnd() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_WORDRIGHTEND, 0, 0);
	}

	void WordRightEndExtend() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_WORDRIGHTENDEXTEND, 0, 0);
	}

	void SetWhitespaceChars(const char* characters) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETWHITESPACECHARS, 0, (LPARAM) characters);
	}

	void SetCharsDefault() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETCHARSDEFAULT, 0, 0);
	}

	int AutoCGetCurrent() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_AUTOCGETCURRENT, 0, 0);
	}

	void Allocate(int bytes) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_ALLOCATE, (WPARAM) bytes, 0);
	}

	int TargetAsUTF8(char* s) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_TARGETASUTF8, 0, (LPARAM) s);
	}

	void SetLengthForEncode(int bytes) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETLENGTHFORENCODE, (WPARAM) bytes, 0);
	}

	int EncodedFromUTF8(const char* utf8, char* encoded) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_ENCODEDFROMUTF8, (WPARAM) utf8, (LPARAM) encoded);
	}

	int FindColumn(int line, int column) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_FINDCOLUMN, (WPARAM) line, (LPARAM) column);
	}

	bool GetCaretSticky() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCARETSTICKY, 0, 0);
	}

	void SetCaretSticky(bool useCaretStickyBehaviour) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETCARETSTICKY, (WPARAM) useCaretStickyBehaviour, 0);
	}

	void ToggleCaretSticky() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_TOGGLECARETSTICKY, 0, 0);
	}

	void SetPasteConvertEndings(bool convert) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETPASTECONVERTENDINGS, (WPARAM) convert, 0);
	}

	bool GetPasteConvertEndings() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETPASTECONVERTENDINGS, 0, 0);
	}

	void SelectionDuplicate() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SELECTIONDUPLICATE, 0, 0);
	}

	void SetCaretLineBackAlpha(int alpha) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETCARETLINEBACKALPHA, (WPARAM) alpha, 0);
	}

	int GetCaretLineBackAlpha() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCARETLINEBACKALPHA, 0, 0);
	}

	void SetCaretStyle(int caretStyle) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETCARETSTYLE, (WPARAM) caretStyle, 0);
	}

	int GetCaretStyle() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETCARETSTYLE, 0, 0);
	}

	void SetIndicatorCurrent(int indicator) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETINDICATORCURRENT, (WPARAM) indicator, 0);
	}

	int GetIndicatorCurrent() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETINDICATORCURRENT, 0, 0);
	}

	void SetIndicatorValue(int value) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETINDICATORVALUE, (WPARAM) value, 0);
	}

	int GetIndicatorValue() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETINDICATORVALUE, 0, 0);
	}

	void IndicatorFillRange(int position, int fillLength) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_INDICATORFILLRANGE, (WPARAM) position, (LPARAM) fillLength);
	}

	void IndicatorClearRange(int position, int clearLength) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_INDICATORCLEARRANGE, (WPARAM) position, (LPARAM) clearLength);
	}

	int IndicatorAllOnFor(int position) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_INDICATORALLONFOR, (WPARAM) position, 0);
	}

	int IndicatorValueAt(int indicator, int position) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_INDICATORVALUEAT, (WPARAM) indicator, (LPARAM) position);
	}

	int IndicatorStart(int indicator, int position) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_INDICATORSTART, (WPARAM) indicator, (LPARAM) position);
	}

	int IndicatorEnd(int indicator, int position) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_INDICATOREND, (WPARAM) indicator, (LPARAM) position);
	}

	void SetPositionCache(int size) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETPOSITIONCACHE, (WPARAM) size, 0);
	}

	int GetPositionCache() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETPOSITIONCACHE, 0, 0);
	}

	void CopyAllowLine() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_COPYALLOWLINE, 0, 0);
	}

	void StartRecord() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STARTRECORD, 0, 0);
	}

	void StopRecord() throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_STOPRECORD, 0, 0);
	}

	void SetLexer(int lexer) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETLEXER, (WPARAM) lexer, 0);
	}

	int GetLexer() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETLEXER, 0, 0);
	}

	void Colourise(long start, long end) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_COLOURISE, (WPARAM) start, (LPARAM) end);
	}

	void SetProperty(const char* key, const char* value) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETPROPERTY, (WPARAM) key, (LPARAM) value);
	}

	void SetKeyWords(int keywordSet, const char* keyWords) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETKEYWORDS, (WPARAM) keywordSet, (LPARAM) keyWords);
	}

	void SetLexerLanguage(const char* language) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_SETLEXERLANGUAGE, 0, (LPARAM) language);
	}

	void LoadLexerLibrary(const char* path) throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		Call(SCI_LOADLEXERLIBRARY, 0, (LPARAM) path);
	}

	int GetProperty(const char* key, char* buf) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETPROPERTY, (WPARAM) key, (LPARAM) buf);
	}

	int GetPropertyExpanded(const char* key, char* buf) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETPROPERTYEXPANDED, (WPARAM) key, (LPARAM) buf);
	}

	int GetPropertyInt(const char* key) const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETPROPERTYINT, (WPARAM) key, 0);
	}

	int GetStyleBitsNeeded() const throw()
	{
		ATLASSERT(::IsWindow(m_hWnd));
		return Call(SCI_GETSTYLEBITSNEEDED, 0, 0);
	}
//--Autogenerated -- end of section automatically generated from Scintilla.iface

};

typedef CSciLexerCtrlT<ATL::CWindow> CSciLexerCtrl;

}; // namespace WTL

#endif // __ATLSCILEXER_H__
